{"version":3,"file":"events.js","mappings":"sCACA,I,6rBCAwB,SAASA,GACX,oBAAXC,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeJ,EAASC,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeJ,EAAS,aAAc,CAAEK,OAAO,K,ICOvD,MAAMC,EAA2B,SAACC,EAAqBC,GAAtB,MACD,iBAAxBD,EACJA,EACAA,EACCE,QAAQ,SAAU,KAClBC,OACAC,MAAM,KACNC,QACA,SAACC,EAAWC,GAAZ,cACID,GADJ,IAEC,CAACC,GAAQN,MAGV,KA4FCO,EAAS,IAzFf,MAAoB,+BACT,IAEVC,GAAGT,EAAqBC,GAAU,WACjC,MAAMS,EAAqBX,EAC1BC,EACAC,GAcD,OAXAL,OAAOe,KAAKD,GAAoBE,KAC/B,SAACC,GAAD,OACE,EAAKC,QAAL,OACG,EAAKA,SADR,IAEA,CAACD,GAAY,IACR,EAAKC,QAAQD,IAAc,GAC/BH,EAAmBG,SAKhBE,KAWRC,IAAIhB,EAAqBC,GAAU,WAClC,MAAMS,EAAqBX,EAC1BC,EACAC,GAgBD,OAbAL,OAAOe,KAAKD,GAAoBE,KAAI,SAACC,GAChC,EAAKC,QAAQD,KACZH,EAAmBG,GACtB,EAAKC,QAAQD,GAAWI,OACvB,EAAKH,QAAQD,GAAWK,QAAQjB,KAAc,EAC9C,GAGD,EAAKa,QAAQD,GAAa,OAKtBE,KAWRI,QAAQN,EAAWO,GAAM,WACxB,MAAMZ,EAAST,EAAyBc,GAElCQ,EAAsB,SAACC,GAAD,OAC3BA,GAAsBA,EAAmBC,KAAKC,OAAQJ,IAoBvD,OAlBAxB,OAAOe,KAAKH,GAAQI,KAAI,SAACC,GACxB,KACG,EAAKC,QAAQD,IAAc,IAAID,IAAIS,IACnC,EAAKP,QAAL,KAAuB,IAAIF,IAAIS,GAChC,MAAOI,GAMR,GALAC,QAAQC,IACP,gCACA,kCAGsB,oBAAZD,QAGV,MAAMD,EAFNC,QAAQE,MAAMH,OAOVV,OAMTS,OAAOK,SAAWrB,EAElB,Y","sources":["webpack://ctEvents/webpack/bootstrap","webpack://ctEvents/webpack/runtime/make namespace object","webpack://ctEvents/./static/js/events.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Probably split string into general purpose object representation for\n * event names and listeners. This function leaves objects un-modified.\n *\n * @param topicStringOrObject {String | Object}\n * @param listener {Function | false}\n *\n * @returns {Object} {\n *    eventname: listener,\n *    otherevent: listener\n * }\n */\nconst splitTopicStringOrObject = (topicStringOrObject, listener) =>\n\ttypeof topicStringOrObject !== 'string'\n\t\t? topicStringOrObject\n\t\t: topicStringOrObject\n\t\t\t\t.replace(/\\s\\s+/g, ' ')\n\t\t\t\t.trim()\n\t\t\t\t.split(' ')\n\t\t\t\t.reduce(\n\t\t\t\t\t(allEvents, event) => ({\n\t\t\t\t\t\t...allEvents,\n\t\t\t\t\t\t[event]: listener,\n\t\t\t\t\t}),\n\n\t\t\t\t\t{}\n\t\t\t\t)\n\nclass EventsManager {\n\t_events = {}\n\n\ton(topicStringOrObject, listener) {\n\t\tconst eventsAndListeners = splitTopicStringOrObject(\n\t\t\ttopicStringOrObject,\n\t\t\tlistener\n\t\t)\n\n\t\tObject.keys(eventsAndListeners).map(\n\t\t\t(eventName) =>\n\t\t\t\t(this._events = {\n\t\t\t\t\t...this._events,\n\t\t\t\t\t[eventName]: [\n\t\t\t\t\t\t...(this._events[eventName] || []),\n\t\t\t\t\t\teventsAndListeners[eventName],\n\t\t\t\t\t],\n\t\t\t\t})\n\t\t)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * In order to remove one single listener you should give as an argument\n\t * the same callback function. If you want to remove *all* listeners from\n\t * a particular event you should not pass the second argument.\n\t *\n\t * @param topicStringOrObject {String | Object}\n\t * @param listener {Function | false}\n\t */\n\toff(topicStringOrObject, listener) {\n\t\tconst eventsAndListeners = splitTopicStringOrObject(\n\t\t\ttopicStringOrObject,\n\t\t\tlistener\n\t\t)\n\n\t\tObject.keys(eventsAndListeners).map((eventName) => {\n\t\t\tif (this._events[eventName]) {\n\t\t\t\tif (eventsAndListeners[eventName]) {\n\t\t\t\t\tthis._events[eventName].splice(\n\t\t\t\t\t\tthis._events[eventName].indexOf(listener) >>> 0,\n\t\t\t\t\t\t1\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\tthis._events[eventName] = []\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Trigger an event. In case you provide multiple events via space-separated\n\t * string or an object of events it will execute listeners for each event\n\t * separatedly. You can use the \"all\" event to trigger all events.\n\t *\n\t * @param topicStringOrObject {String | Object}\n\t * @param data {Object}\n\t */\n\ttrigger(eventName, data) {\n\t\tconst events = splitTopicStringOrObject(eventName)\n\n\t\tconst dispatchSingleEvent = (listenerDescriptor) =>\n\t\t\tlistenerDescriptor && listenerDescriptor.call(window, data)\n\n\t\tObject.keys(events).map((eventName) => {\n\t\t\ttry {\n\t\t\t\t;(this._events[eventName] || []).map(dispatchSingleEvent)\n\t\t\t\t;(this._events['all'] || []).map(dispatchSingleEvent)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t'%c [Events] Exception raised.',\n\t\t\t\t\t'color: red; font-weight: bold;'\n\t\t\t\t)\n\n\t\t\t\tif (typeof console !== 'undefined') {\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t} else {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\treturn this\n\t}\n}\n\nconst events = new EventsManager()\n\nwindow.ctEvents = events\n\nexport default events\n"],"names":["exports","Symbol","toStringTag","Object","defineProperty","value","splitTopicStringOrObject","topicStringOrObject","listener","replace","trim","split","reduce","allEvents","event","events","on","eventsAndListeners","keys","map","eventName","_events","this","off","splice","indexOf","trigger","data","dispatchSingleEvent","listenerDescriptor","call","window","e","console","log","error","ctEvents"],"sourceRoot":""}